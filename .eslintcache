[{"/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/App.js":"1","/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/MoreDetail.js":"2","/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/ViewPicture.js":"3","/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/ChoosePicture.js":"4","/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/firebase/index.js":"5","/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/firebase/config.js":"6","/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/Register.js":"7","/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/UploadFunction.js":"8","/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/Process.js":"9","/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/AddEvent.js":"10","/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/ListofParticipant.js":"11","/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/StorageDataTable.js":"12"},{"size":1940,"mtime":1606216496173,"results":"13","hashOfConfig":"14"},{"size":5145,"mtime":1606154564755,"results":"15","hashOfConfig":"14"},{"size":5048,"mtime":1606155877435,"results":"16","hashOfConfig":"14"},{"size":8963,"mtime":1606154397708,"results":"17","hashOfConfig":"14"},{"size":207,"mtime":1606217601107,"results":"18","hashOfConfig":"14"},{"size":444,"mtime":1606225336884,"results":"19","hashOfConfig":"14"},{"size":6300,"mtime":1606219316700,"results":"20","hashOfConfig":"14"},{"size":8858,"mtime":1606226149867,"results":"21","hashOfConfig":"14"},{"size":6760,"mtime":1606225836126,"results":"22","hashOfConfig":"14"},{"size":8992,"mtime":1606154005239,"results":"23","hashOfConfig":"14"},{"size":4445,"mtime":1606154515052,"results":"24","hashOfConfig":"14"},{"size":3118,"mtime":1606155635169,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"13je8o",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/App.js",[],["52","53"],"/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/MoreDetail.js",[],"/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/ViewPicture.js",[],"/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/ChoosePicture.js",[],"/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/firebase/index.js",[],"/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/firebase/config.js",[],"/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/Register.js",["54","55","56","57"],"/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/UploadFunction.js",["58"],"import React, { Component, Fragment } from 'react';\nimport { Link, Redirect } from 'react-router-dom'\nimport { Form, Row, Col, Button, Container } from 'react-bootstrap'\nimport firebase from './firebase';\nimport StorageDataTable from './StorageDataTable';\nimport Nevbar from './Nevbar.js'\n\nclass UploadFunction extends Component {\n\n    state = {\n        files: [], //ใช้เก็บข้อมูล File ที่ Upload\n        setFiles: [],\n        uploadValue: 0, //ใช้เพื่อดู Process การ Upload\n        filesMetadata: [], //ใช้เพื่อรับข้อมูล Metadata จาก Firebase\n        rows: [], //ใช้วาด DataTable\n        event_id: this.props.match.params.id,\n        currentUser: null,\n        auth: false,\n        participant_id: \"\",\n        keypath: \"\",\n        imageAsFile: \"\",\n        emailPaticipant: \"\",\n        img: []\n    }\n\n    async componentWillMount() {\n        let user = await this.getUser();\n        let key = await this.getKey(user)\n        this.setState({\n            currentUser: user,\n            keypath: key,\n            auth: true\n        })\n        this.getMetaDataFromDatabase()\n    }\n\n    getUser = () => {\n        return new Promise((resolve, reject) => {\n            firebase.auth().onAuthStateChanged(function (user) {\n                if (user) {\n                    resolve(user)\n                } else {\n                }\n            });\n        })\n    }\n\n    getKey = (user) => {\n        return new Promise((resolve, reject) => {\n            firebase.database().ref(\"organizers\").orderByChild(\"email\").equalTo(user.email)\n                .on(\"child_added\", function (snapshot) {\n                    resolve(snapshot.key)\n                })\n        })\n    }\n\n    //โหลดข้อมูล Metadata จาก Firebase\n    getMetaDataFromDatabase() {\n        const databaseRef = firebase.database().ref(`organizers/${this.state.keypath}/events/${this.state.event_id ? this.state.event_id : null}/event_pics`);\n        databaseRef.on('value', snapshot => {\n            this.setState({\n                filesMetadata: snapshot.val()\n            }, () => {\n                this.addMetadataToList()\n            });\n        });\n    }\n\n    //ลบข้อมูล Metada จาก Firebase\n    deleteMetaDataFromDatabase(e, rowData) {\n\n        const storageRef = firebase.storage().ref(`eventpics/${rowData.name}`)\n        // Delete the file on storage\n        storageRef.delete()\n            .then(() => {\n                const databaseRef = firebase.database().ref(`organizers/${this.state.keypath}/events/${this.state.event_id ? this.state.event_id : null}/event_pics`)\n                // Delete the file on realtime database\n                databaseRef.child(rowData.key).remove()\n                    .then(() => {\n                        this.getMetaDataFromDatabase()\n                    })\n                    .catch((error) => {\n                    });\n            })\n            .catch((error) => {\n                console.log(\"Delete file error : \", error.message);\n            });\n    }\n\n    //แอดข้อมูลเข้า list table\n    async addMetadataToList() {\n        let i = 1;\n        let rows = [];\n\n        //Loop add data to rows\n        for (let key in this.state.filesMetadata) {\n\n            let fileData = this.state.filesMetadata[key];\n            let downloadUrl = await firebase.storage().ref(`eventpics/${fileData.metadataFile.name}`).getDownloadURL()\n            let objRows = {\n                no: i++,\n                key: key, //ใช้เพื่อ Delete\n                name: fileData.metadataFile.name,\n                downloadURLs: downloadUrl,\n                fullPath: fileData.metadataFile.fullPath,\n                size: (fileData.metadataFile.size),\n                contentType: fileData.metadataFile.contentType,\n            }\n            rows.push(objRows)\n        }\n\n        this.setState({\n            rows: rows\n        }, () => {\n\n        })\n    }\n\n    handleImageAsFile = (e) => {\n        const images = e.target.files\n        this.setState({\n            files: images\n        })\n    }\n\n    async handleProcessing(e) {\n        e.preventDefault();\n        // handle file upload here\n        for (const [key, file] of Object.entries(this.state.files)) {\n            //console.log(`[${key}] ${file.name}`)\n            let storageRef = firebase.storage().ref(`eventpics/${file.name}`)\n            await storageRef.put(file)\n\n            let downloadUrl = await storageRef.getDownloadURL()\n\n            storageRef.getMetadata()\n                .then((metadata) => {\n\n                    // Metadata now contains the metadata for 'filepond/${file.name}'\n                    let metadataFile = {\n                        name: metadata.name,\n                        size: metadata.size,\n                        contentType: metadata.contentType,\n                        fullPath: metadata.fullPath,\n                        downloadURLs: downloadUrl,\n                    }\n                    let is_allow_all_panticipant = true\n                    const databaseRef = firebase.database().ref(`organizers/${this.state.keypath}/events/${this.state.event_id}/event_pics`);\n                    databaseRef.push({\n                        metadataFile, is_allow_all_panticipant\n                    })\n                }).catch(function (error) {\n                    console.log(`Upload error : ${error.message}`)\n                })\n        }\n    }\n\n    render() {\n        const { rows, currentUser, auth } = this.state;\n        if (auth) {\n            if (currentUser) {\n                return (\n                    <Fragment>\n                        <Nevbar />\n                        <Container fluid>\n                            <Row className=\"mb-4\">\n                                <Col\n                                    xs={{ span: 12 }}\n                                    sm={{ span: 8, offset: 2 }}\n                                    md={{ span: 8, offset: 2 }}\n                                    lg={{ span: 8, offset: 2 }}\n                                >\n                                    <Form onSubmit={this.handleProcessing.bind(this)} className=\"text-center\">\n                                        <h2 className=\"mb-3\">Select Picture of Event</h2>\n                                        <Form.Control\n                                            multiple\n                                            type=\"file\"\n                                            onChange={this.handleImageAsFile.bind(this)}\n                                        />\n                                        <Button type=\"submit\" className=\"btn-custom mt-3\" id=\"primary\" style={{ width: 280, height: 60, fontSize: \"21px\", borderRadius: 30 }}>Upload Event Picture</Button>\n                                    </Form>\n                                </Col>\n                                <Col\n                                    xs={{ span: 12 }}\n                                    sm={{ span: 8, offset: 2 }}\n                                    md={{ span: 8, offset: 2 }}\n                                    lg={{ span: 10, offset: 1 }}\n                                    className=\"mt-4\"\n                                >\n                                    <StorageDataTable\n                                        rows={rows}\n                                        filesMetadata={this.filesMetadata}\n                                        deleteData={this.deleteMetaDataFromDatabase.bind(this)}\n                                    />\n                                </Col>\n                                <Col\n                                    xs={{ span: 12 }}\n                                    sm={{ span: 8, offset: 2 }}\n                                    md={{ span: 8, offset: 2 }}\n                                    lg={{ span: 10, offset: 1 }}\n                                    className=\"text-lg-right\"\n                                >\n                                    <Link to={`/Process/${this.state.event_id}`} >\n                                        <Button className=\"btn-custom mt-3\" id=\"primary\" style={{ width: 300, height: 55, fontSize: \"20px\", borderRadius: 30 }}>\n                                            Next\n                                    </Button>\n                                    </Link>\n                                </Col>\n                            </Row>\n                        </Container>\n                    </Fragment >\n                )\n            }\n            if (!currentUser) {\n                return (\n                    <Redirect to=\"/Login\" />\n                )\n            }\n        }\n        else {\n            return (\n                <div>Loading</div>\n            )\n        }\n    }\n}\n\nexport default UploadFunction;","/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/Process.js",[],"/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/AddEvent.js",[],"/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/ListofParticipant.js",[],"/Users/haritsuttisaksri/Documents/GitHub/Eventpic-frontend/src/StorageDataTable.js",["59"],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":32,"column":23,"nodeType":"66","messageId":"67","endLine":32,"endColumn":31},{"ruleId":"68","severity":1,"message":"69","line":93,"column":45,"nodeType":"70","endLine":93,"endColumn":63},{"ruleId":"68","severity":1,"message":"69","line":96,"column":68,"nodeType":"70","endLine":96,"endColumn":132},{"ruleId":"68","severity":1,"message":"69","line":97,"column":37,"nodeType":"70","endLine":97,"endColumn":120},{"ruleId":"64","severity":1,"message":"71","line":129,"column":21,"nodeType":"66","messageId":"67","endLine":129,"endColumn":24},{"ruleId":"72","severity":1,"message":"73","line":27,"column":25,"nodeType":"70","endLine":27,"endColumn":82},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'key' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]