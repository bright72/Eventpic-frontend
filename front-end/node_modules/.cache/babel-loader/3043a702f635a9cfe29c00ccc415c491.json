{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phasi\\\\Documents\\\\GitHub\\\\Requesting-permission-to-use-photos-system-PDPA-\\\\front-end\\\\src\\\\ShowPicture.js\";\nimport React, { useState } from 'react';\nimport firebase, { storage } from './firebase';\nimport { Form, Button, Container, Row, Image } from 'react-bootstrap';\nimport Nevbar from './Nevbar.js';\nimport './Style.css';\n\nconst ShowPicture = props => {\n  const [files, setFiles] = useState([]);\n  const [URLs, setURL] = useState([]); //const urls2 = [];\n\n  const onFileChange = e => {\n    for (let i = 0; i < e.target.files.length; i++) {\n      const newFile = e.target.files[i];\n      newFile[\"id\"] = Math.random(); // add an \"id\" property to each File object\n\n      setFiles(prevState => [...prevState, newFile]);\n    }\n  };\n\n  const onUploadSubmission = e => {\n    e.preventDefault(); // prevent page refreshing\n\n    const promises = [];\n\n    if (files.length > 0) {\n      files.forEach(file => {\n        const uploadTask = firebase.storage().ref().child(`images/${file.name}`).put(file);\n        promises.push(uploadTask);\n        uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, snapshot => {\n          const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n\n          if (snapshot.state === firebase.storage.TaskState.RUNNING) {\n            console.log(`Progress: ${progress}%`);\n          }\n        }, error => console.log(error.code), async () => {\n          const downloadURL = await uploadTask.snapshot.ref.getDownloadURL(); // do something with the url\n          //urls2.push({index: url.length, value: downloadURL});\n\n          setURL(URLs => [...URLs, {\n            index: URLs.length,\n            value: downloadURL\n          }]);\n          console.log(URLs); // console.log(url)\n        });\n      });\n      Promise.all(promises).then(() => alert('All files uploaded')).catch(err => console.log(err.code));\n    } else {// return (\n      //     alert('No files uploaded!')\n      // )\n    } //setURL([...URLs, { url }]);\n    //console.log(url);\n\n  }; // useEffect(() => {\n  //     // Should not ever set state during rendering, so do this in useEffect instead.\n  //     setURL(url);\n  //   }, []);\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Nevbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-center mt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, \" Pictures\"), /*#__PURE__*/React.createElement(Container, {\n    fluid: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"image-preview-area\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, URLs.map(url => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image-preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"crop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Image, {\n    src: url.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 51\n    }\n  })))))));\n};\n\nexport default ShowPicture;","map":{"version":3,"sources":["C:/Users/phasi/Documents/GitHub/Requesting-permission-to-use-photos-system-PDPA-/front-end/src/ShowPicture.js"],"names":["React","useState","firebase","storage","Form","Button","Container","Row","Image","Nevbar","ShowPicture","props","files","setFiles","URLs","setURL","onFileChange","e","i","target","length","newFile","Math","random","prevState","onUploadSubmission","preventDefault","promises","forEach","file","uploadTask","ref","child","name","put","push","on","TaskEvent","STATE_CHANGED","snapshot","progress","bytesTransferred","totalBytes","state","TaskState","RUNNING","console","log","error","code","downloadURL","getDownloadURL","index","value","Promise","all","then","alert","catch","err","map","url"],"mappings":"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","sourcesContent":["import React, { useState, } from 'react';\r\nimport firebase, { storage } from './firebase';\r\nimport { Form, Button, Container, Row, Image } from 'react-bootstrap'\r\nimport Nevbar from './Nevbar.js'\r\nimport './Style.css';\r\n\r\nconst ShowPicture = (props) => {\r\n\r\n    const [files, setFiles] = useState([])\r\n    const [URLs, setURL] = useState([])\r\n    //const urls2 = [];\r\n\r\n    const onFileChange = e => {\r\n        for (let i = 0; i < e.target.files.length; i++) {\r\n            const newFile = e.target.files[i];\r\n            newFile[\"id\"] = Math.random();\r\n            // add an \"id\" property to each File object\r\n            setFiles(prevState => [...prevState, newFile]);\r\n        }\r\n    };\r\n    \r\n    const onUploadSubmission = e => {\r\n        e.preventDefault(); // prevent page refreshing\r\n        const promises = [];\r\n\r\n        if (files.length > 0) {\r\n            files.forEach(file => {\r\n                const uploadTask =\r\n                    firebase.storage().ref().child(`images/${file.name}`).put(file);\r\n                promises.push(uploadTask);\r\n                uploadTask.on(\r\n                    firebase.storage.TaskEvent.STATE_CHANGED,\r\n                    snapshot => {\r\n                        const progress =\r\n                            ((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\r\n                        if (snapshot.state === firebase.storage.TaskState.RUNNING) {\r\n                            console.log(`Progress: ${progress}%`);\r\n                        }\r\n\r\n                    },\r\n                    error => console.log(error.code),\r\n                    async () => {\r\n                        const downloadURL = await uploadTask.snapshot.ref.getDownloadURL();\r\n                        // do something with the url\r\n                        //urls2.push({index: url.length, value: downloadURL});\r\n\r\n                        setURL(URLs => [...URLs, { index: URLs.length, value: downloadURL }])\r\n                        console.log(URLs);\r\n                        // console.log(url)\r\n                    }\r\n                );\r\n            });\r\n            Promise.all(promises)\r\n                .then(() => alert('All files uploaded'))\r\n                .catch(err => console.log(err.code));\r\n        } else {\r\n            // return (\r\n            //     alert('No files uploaded!')\r\n            // )\r\n        }\r\n\r\n        //setURL([...URLs, { url }]);\r\n        //console.log(url);\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     // Should not ever set state during rendering, so do this in useEffect instead.\r\n    //     setURL(url);\r\n    //   }, []);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Nevbar />\r\n\r\n            <h1 className=\"text-center mt-3\"> Pictures</h1>\r\n\r\n            <Container fluid=\"md\">\r\n\r\n                <Row className=\"image-preview-area\">\r\n                    {URLs.map(url =>\r\n                        <div className=\"image-preview\">\r\n\r\n                            <div className=\"crop\"><Image src={url.value} /></div>\r\n\r\n                        </div>)}\r\n                </Row>\r\n\r\n            </Container>\r\n\r\n            {/* <li key={URLs.index}><img src = {URLs.value}/></li> */}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ShowPicture;\r\n"]},"metadata":{},"sourceType":"module"}